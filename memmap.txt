28-bit space: $0FFFFFFF
		|_______ bank

from	to	size	name
0000000	000FFFF 000FFFF BIOS
0010000 0FFFFFF	0FF0000 ROM
1000000 9FFFFFF 8FFFFFF RAM
D7FFE00	D7FFFFF	0000200	DISK
D800000			IO
E000000	EFFFFFF	0FFFFFF	VRAM
FF00000	FFFFFFF	00FFFFF	STACK

VRAM
000000	Text/Bitmap/Tilemaps
080000	Tileset
100000	Palette
100200	Font
108000	Sprite tile/pal
108200	Sprite position/flip/priority

text: up to 80x60=4800 16-bit cells: 4800*2 = 9600    => $ 2580
bitmap: up to 640x480=307200 8-bit pixels             => $4B000
tilemap: 128x128=16384  16-bit cells: 16384*2 = 32768 => $ 8000
	...times 4 = 32768*4                          => $20000
tileset: 8x8 4bpp cells = 32, times 2048 = 1024       => $ 8000
palette: up to 256 16-bit colors: 256*2 = 512         => $  200
font: 12288 bytes                                     => $ 3000
sprites A: up to 256 16-bit entries = 512             => $  200
sprites B: up to 256 32-bit entries = 1024            => $  400

One map cell:	PPPP vh.T TTTT TTTT
		|    || |____________ Tile #
		|    ||______________ Horizontal flip
		|    |_______________ Vertical flip
		|____________________ Palette #

One sprite:	PPPP E..T TTTT TTTT
		|    |  |____________ Tile #
		|    |_______________ Enabled
		|____________________ Palette #
		PP.2 vhyx ...V VVVV VVVV ..HH HHHH HHHH
		|  | ||||    |             |___________  Horizontal position
		|  | ||||    |_________________________  Vertical position
		|  | ||||______________________________  Double width
		|  | |||_______________________________  Double height
		|  | ||________________________________  Horizontal flip
		|  | |_________________________________  Vertical flip
		|  |___________________________________  Double width and height
		|______________________________________  Priority
Alternative:	PPvh hhww ~~~~
		| || | |___ Width: 8, 16, 32, 64
		¦ ¦¦ |_____ Height: same

Draw order for tilemap mode:
	Backdrop
	Sprites with priority 3
	Map 1
	Sprites with priority 2 
	Map 2
	Sprites with priority 1
	Map 3
	Sprites with priority 0
	Map 4
Draw order for other modes:
	Stuff
	Sprites with any priority

BLITTER
0100	Function	.... .... .... .... .... .... .... FFFF
0104	Address A	ptr
0108	Address B	ptr
010C	Length		val
0110	Key		val
Functions:
	0001 Blit	2222 2222 2222 1111 1111 1111 44KS 0001
			|              |              ||||_______ Enable strideskip
			|              |              |||________ Enable colorkey
			|              |              ||_________ Source is 4-bits
			|              |              |__________ Target is 4-bits
			|              |_________________________ Source stride
			|________________________________________ Target stride
			Copies LENGTH bytes from A to B.
			If STRIDESKIP is enabled, copies SOURCE STRIDE bytes,
			then skips over TARGET STRIDE - SOURCE STRIDE bytes,
			until LENGTH bytes are copied in total.
			If COLORKEY is enabled, pixels matching KEY are skipped.
			If 4-BIT SOURCE is set:
				If 4-BIT TARGET is set, care is taken to work on nibbles.
				If 4-BIT TARGET is not set, the source data is expanded.
			If 4-BIT SOURCE is not set:
				If 4-BIT TARGET is set, behavior is undefined.
				If 4-BIT TARGET not set, nothing special is done.
	0010 Clear	2222 2222 2222 1111 1111 1111 .WWS 0010
			                               |_________ Source width
			Copies the value of ADDRESS A to B.
			If WIDTH is set to 0, sets B to the low byte of the source value.
			If WIDTH is set to 1, sets B to the lower short instead.
			If WIDTH is set to 2, sets B to the full word.
			If WIDTH is set to 3, behavior is undefined.
	0011 Invert	2222 2222 2222 1111 1111 1111 ...S 0011
			Inverts the byte values at B, simple as that.
	0100 UnRLE	.+BA 2211 VVVV LLLL LLLL MMMM MMMM 0100
			 ||| | |  |    |         |_______________ Detection mask
			 ||| | |  |    |_________________________ Length mask
			 ||| | |  |______________________________ Length add value
			 ||| | |_________________________________ RLE run style
			 ||| |___________________________________ Raw run style
			 |||_____________________________________ Use LAV for raw runs
			 ||______________________________________ Use LAV for RLE runs
			 |_______________________________________ Add 1 to length.
			Unpacks an RLE bytestream from ADDRESS A to B.
			Until LENGTH bytes are emitted:
				Get a byte A.
				Let L be (A & LMASK).
				If LEN+ is set, increase L by 1.
				If (A & DMASK)
					If RLESTYLE is
						0: Get a byte B.
						1-3: reserved
					If LAV-RLE is set, increase L by LAV.
					Emit B L times.
				else
					If LAV-RAW is set, increase L by LAV.
					If RAWSTYLE is
						0: Emit A.
						1: Get and emit L bytes.
						2-3: reserved


IO
00000	Line		sval
00002	---
00004	ScreenMode	B32S ..MM
			||||   |___ Mode
			||||_______ Enable sprites
			|||________ 240px tall instead of 480px
			||_________ 320px wide instead of 640px
			|__________ Bold in text mode
00005	Interrupts	X... .VH.
			|     ||___ HBlank triggered
			|     |____ VBlank triggered
			|__________ Disable interrupts
00006	KeyIn		scan
00008	Joypad		YXBA RLDU
0000A	TickCount	sval
0000C	ScreenFade	W..A AAAA
			|  |_______ Amount
			|__________ To white
0000D	TriggerLine	val
0000E	DebugOut	char
-----
00010	Tilemap1	ESS. TTTT ...V VVVV VVVV ...H HHHH HHHH
00014	Tilemap2	||   |       |              |
00018	Tilemap3	||   |       |              |
0001C	Tilemap4	||   |       |              |
			||   |       |              |____________ Horizontal scroll
			||   |       |___________________________ Vertical scroll
			||   |___________________________________ Tile offset
			||_______________________________________ Size
			|________________________________________ Enabled
00020	DMASource	ptr/val
00024	DMATarget	ptr
00028	DMALength	val
0002A	DMAControl	..WW VTSE
			  |  ||||__ Enable now
			  |  |||___ Increase source every loop
			  |  ||____ Increase target every loop
			  |  |_____ Use source as direct value, not as a pointer
			  |________ Width of data to copy
0002C	---
00030	DiskSector	sec
00032	DiskControl	.... WREP
			     ||||__ Present (read only)
			     |||___ Error state (read only)
			     ||____ Read now
			     |_____ Write now
-----
00040	MidiOut		msg
-----
00080	HDMAControl1	...L LLLL LLLL ...S SSSS SSSS D.WW ...E
			   |              |           | |     |__ Enable
			   |              |           | |________ Width of data to copy
			   |              |           |__________ Doublescan
			   |              |______________________ Starting scanline
			   |_____________________________________ Linecount
00084	HDMAControl2	...LLLLLLLLL...SSSSSSSSSD.WW...E
00088	HDMAControl3
0008C	HDMAControl4
00090	HDMAControl5
00094	HDMAControl6
00098	HDMAControl7
0009C	HDMAControl8
000A0	HDMASource1	ptr
000A4	HDMASource2
000A8	HDMASource3
000AC	HDMASource4
000B0	HDMASource5
000B4	HDMASource6
000B8	HDMASource7
000BC	HDMASource8
000C0	HDMATarget1	ptr
000C4	HDMATarget2
000C8	HDMATarget3
000CC	HDMATarget4
000D0	HDMATarget5
000D4	HDMATarget6
000D8	HDMATarget7
000DC	HDMATarget8
-----
00100	BlitFunction
00104	BlitAddrA
00108	BlittAddrB
0010C	BlitLength
00110	BlitKey
-----
